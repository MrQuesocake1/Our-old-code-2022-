/*
  2022 everybot code
  written by carson graf
  don't email me, @ me on discord
*/

/*
  This is catastrophically poorly written code for the sake of being easy to follow
  If you know what the word "refactor" means, you should refactor this code
*/

package frc.robot;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.VictorSPXControlMode;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends TimedRobot {

    //Definitions for the hardware. Change this if you change what stuff you have plugged in

    VictorSPX driveLeftA = new VictorSPX(1);
    VictorSPX driveLeftB = new VictorSPX(2);
    VictorSPX driveRightA = new VictorSPX(3);
    VictorSPX driveRightB = new VictorSPX(4);
    CANSparkMax arm = new CANSparkMax(5, MotorType.kBrushless);
    VictorSPX intake = new VictorSPX(6);

    Joystick driverController = new Joystick(0);

    //Constants for controlling the arm. consider tuning these for your particular robot
    final double armHoldUp = 0.13;
    final double armHoldDown = 0.13;
    final double armTravel = 0.25;

    final double armTimeUp = 0.25;
    final double armTimeDown = 0.25;

    //Varibles needed for the code
    boolean armUp = true; //Arm initialized to up because that's how it would start a match
    boolean burstMode = false;
    double lastBurstTime = 0;

    double autoStart = 0;
    boolean goForAuto;


    /**
     * This function is run when the robot is first started up and should be used for any
     * initialization code.
     */
    @Override
    public void robotInit() {
        //Configure motors to turn correct direction. You may have to invert some of your motors
        driveLeftA.setInverted(true);
        driveLeftB.setInverted(true);
        driveRightA.setInverted(true);
        driveRightB.setInverted(true);

        arm.setInverted(false);
        arm.setIdleMode(IdleMode.kBrake);
        arm.burnFlash();

        //add a thing on the dashboard to turn off auto if needed
        //SmartDashboard.putBoolean("Go For Auto", true);
        goForAuto = SmartDashboard.getBoolean("Go For Auto", true);
    }

    @Override
    public void autonomousInit() {
        goForAuto = SmartDashboard.getBoolean("Go For Auto", true);
        //get a time for auton start to do events based on time later
        autoStart = Timer.getFPGATimestamp();
        //check dashboard icon to 
        //ensure good to do auto
        goForAuto = SmartDashboard.getBoolean("Go For Auto", true);
    }

    /** This function is called periodically during autonomous. */
    @Override
    public void autonomousPeriodic() {
        //arm control code. same as in teleop
        if(armUp){
            if(Timer.getFPGATimestamp() - lastBurstTime < armTimeUp){
                arm.set(armTravel);
            }
            else{
                arm.set(armHoldUp);
            }
        }
        else{
            if(Timer.getFPGATimestamp() - lastBurstTime < armTimeDown){
                arm.set(-armTravel);
            }
            else{
                arm.set(-armHoldUp);
            }
        }

        //get time since start of auto
        double autoTimeElapsed = Timer.getFPGATimestamp() - autoStart;
        if(goForAuto){
            //series of timed events making up the flow of auto
            if(autoTimeElapsed < 3){
                //spit out the ball for three seconds
                intake.set(ControlMode.PercentOutput, 0.20);
            }else if(autoTimeElapsed < 6){
                //stop spitting out the ball and drive backwards *slowly* for three seconds
                intake.set(ControlMode.PercentOutput, 0);
                
                //Movement During Autonomous
                driveLeftA.set(ControlMode.PercentOutput, 0.20);
                driveLeftB.set(ControlMode.PercentOutput, 0.20);
                driveRightA.set(ControlMode.PercentOutput, -0.20);
                driveRightB.set(ControlMode.PercentOutput, -0.20);
            }else{
                //do nothing for the rest of auto
                intake.set(ControlMode.PercentOutput, 0);
                driveLeftA.set(ControlMode.PercentOutput, 0);
                driveLeftB.set(ControlMode.PercentOutput, 0);
                driveRightA.set(ControlMode.PercentOutput, 0);
                driveRightB.set(ControlMode.PercentOutput, 0);
            }
        }
    }

    /** This function is called once when teleop is enabled. */
    @Override
    public void teleopInit() {}

    /** This function is called periodically during operator control. */
    @Override
    public void teleopPeriodic() {
        //Set up arcade steer
//        double forward = -driverController.getRawAxis(1);
//        double turn = -driverController.getRawAxis(2);

          double driveLeftPower = driverController.getRawAxis(1);
        double driveRightPower = -driverController.getRawAxis(3);

        driveLeftA.set(ControlMode.PercentOutput, driveLeftPower);
        driveLeftB.set(ControlMode.PercentOutput, driveLeftPower);
        driveRightA.set(ControlMode.PercentOutput, driveRightPower);
        driveRightB.set(ControlMode.PercentOutput, driveRightPower);


        //Intake controls
        if(driverController.getRawButton(9)){
            intake.set(VictorSPXControlMode.PercentOutput, 0.40);
        }
        else if(driverController.getRawButton(5)){
            intake.set(VictorSPXControlMode.PercentOutput, -0.40);
        }
        else{
            intake.set(VictorSPXControlMode.PercentOutput, 0);
        }

        //Arm Controls
        if(armUp){
            if(Timer.getFPGATimestamp() - lastBurstTime < armTimeUp){
                arm.set(armTravel);
            }
            else{
                arm.set(armHoldUp);
            }
        }
        else{
            if(Timer.getFPGATimestamp() - lastBurstTime < armTimeDown){
                arm.set(-armTravel);
            }
            else{
                arm.set(-armHoldDown);
            }
        }

        if(driverController.getRawButtonPressed(6) && !armUp){
            lastBurstTime = Timer.getFPGATimestamp();
            armUp = true;
        }
        else if(driverController.getRawButtonPressed(10) && armUp){
            lastBurstTime = Timer.getFPGATimestamp();
            armUp = false;
        }

    }

    @Override
    public void disabledInit() {
        //On disable turn off everything
        //done to solve issue with motors "remembering" previous setpoints after reenable
        driveLeftA.set(ControlMode.PercentOutput, 0);
        driveLeftB.set(ControlMode.PercentOutput, 0);
        driveRightA.set(ControlMode.PercentOutput, 0);
        driveRightB.set(ControlMode.PercentOutput, 0);
        arm.set(0);
        intake.set(ControlMode.PercentOutput, 0);
    }

}
